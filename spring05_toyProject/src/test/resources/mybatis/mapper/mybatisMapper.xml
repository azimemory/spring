<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	#{} vs ${} 
		#{} : preparedStatement 에서 쿼리 템플릿을 완성시킨 뒤 파라미터 값을 전달 받아 쿼리를 완성
			  문자열 이스케이프 처리가 자동으로 된다. sqlInjection 공격으로부터 안전하다
		${} : 쿼리 템플릿을 생성하는 시점에 파라미터로 전달된 값을 사용해 쿼리 템플릿을 생성
			  SQL Injection에 영혼까지 털릴 수 있음으로, where절 에서는 사용하지 말자
	statementType 속성을 통해  쿼리를 실행할 때 사용할 statement 객체를 바꿀 수 있다.
	_parameter : 파라미터의 주소를 일시적으로 저장하고 있는 변수		
 -->
<!-- namespace : 전체 클래스명 -->  
<mapper namespace="com.kh.toy.mybatis.MybatisRepository">
	<select id="selectListReturnedAsMap" resultType="java.util.Map">
		select *
		from tb_member
		inner join tb_rent_master using(user_id)
		where user_id = #{userId}
	</select>

	<!-- 마이바티스의 기본 statement 객체는 PreparedStatement를 사용한다. 
		프로시저 호출을 할 때는 CallableStatement를 사용해야 하기 때문에, 
		statementType 속성을 callable로 지정해 쿼리가 실행될 때 사용할 Statement 객체를 변경한다.-->
	<insert id="procedure" statementType="CALLABLE">
		{call sp_rent_insert(#{bIdx, mode=IN})}
	</insert>
	
	<select id="dynamicQueryIF" resultType="map">
		select * from tb_book where
		<if test="searchType == 'info'" >
			info like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'author'" >
			author like '%'||#{keyword}||'%'
		</if>
	</select>

	<select id="dynamicQueryChoose" resultType="map">
		select * from tb_book where
		<choose>
			<when test="searchType=='info'">
				info like '%'||#{keyword}||'%'
			</when>
			<when test="searchType=='author'">
				author like '%'||#{keyword}||'%'
			</when>
			<otherwise>
				title like '%'||#{keyword}||'%'
			</otherwise>
		</choose>
	</select>
	
	<update id="dynamicQuerySetTag">
		update tb_member 
			<set>
				<if test="password != null">
					password = #{password}		
				</if>
				<if test="tell != null">
					,tell = #{tell}
				</if>
				<if test="email != null">
					,email = #{email}
				</if>
			</set>
		where user_id = #{userId}
	</update>
	
	<insert id="dynamicQueryForeachTag" >
		insert into ${table}
		(${primaryKey.col}
		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
			${key}
		</foreach>
		values(${primaryKey.val}
		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
			#{val}
		</foreach>
	</insert>
	
	<!-- List 또는 배열을 파라미터로 넘길 경우 내부적으로 전달인자를 Map으로 감싼다.
		{list=전달인자(list)}
		 -->
	<select id="dynamicQueryForeachTagWithList" resultType="member">
		<!-- 
		${_parameter} 	
		쿼리템플릿이 만들어지는 시점에 _parameter의 toString이 찍혀서 내부적으로 
		list가 어떤 형태의 Map으로 넘어오는 지 확인 가능 -->		 
		
		select * from tb_member
		where user_id in 
		<foreach collection="list" item="userId" open="(" separator="," close=")">
			#{userId}
		</foreach>
	</select>
	
	<select id="dynamicQueryWhereAndForeachTag" resultType="map">
		select * from tb_book 
		<where>
			<foreach collection="searchType" item="val">
				<if test="val == 'rentable'">
					and book_amt > 0			
				</if>
				<if test="val == 'title'">
					or title like '%'||#{keyword}||'%'
				</if>
				<if test="val == 'author'">
					or author like '%'||#{keyword}||'%'
				</if>
			</foreach>
		</where>
	</select>
	
	<resultMap type="map" id="rentData">
		<!-- 
			column : type과 key값을 지정할 컬럼명
			javaType : 해당 컬럼의 값을 반환할 때 사용할 타입
			property : 컬럼의값을 맵에 바인드할 때 사용할 키값
	 	-->
		<result column="rm_idx" javaType="string" property="rmIdx"/>
		<result column="rb_idx" javaType="string" property="rbIdx"/>
		<result column="user_id" javaType="string" property="userId"/>
		<result column="return_date" javaType="date" property="returnDate"/>
		<result column="reg_date" javaType="date" property="regDate"/>
		<result column="title" javaType="string" />
		<result column="author" javaType="string" />
		<result column="isbn" javaType="string" />
		<result column="rent_book_cnt" javaType="int" property="rentBookCnt"/>
	</resultMap>	
	<select id="resultMap" resultMap="rentData">
		select
			rm_idx, rb_idx, rm.user_id, rm.title
			,author,isbn,return_date,rent_book_cnt
			<!-- resultMap에 설정하지 않은 컬럼 : b_idx -->
			,b_idx
		from tb_rent_master rm
			inner join tb_rent_book using(rm_idx)
			inner join tb_book using(b_idx)
		where rm.user_id = #{userId}
	</select>
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	




















</mapper>